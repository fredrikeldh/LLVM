//=====-- MapipSubtarget.h - Define Subtarget for the Mapip -----*- C++ -*--====//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the Mapip specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef MAPIPSUBTARGET_H
#define MAPIPSUBTARGET_H

#include "llvm/Target/TargetSubtargetInfo.h"
#include "llvm/MC/MCInstrItineraries.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "MapipGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class MapipSubtarget : public MapipGenSubtargetInfo {

public:
  // NOTE: O64 will not be supported.
  enum MapipABIEnum {
    MosyncABI
  };

protected:

  enum MapipArchEnum {
    Mapip32, Mapip32f
  };

  // Mapip architecture version
  MapipArchEnum MapipArchVersion;

  // Mapip supported ABIs
  MapipABIEnum MapipABI;

  // IsLittle - The target is Little Endian
  bool IsLittle;

  // HasFloat - The target processor has 64-bit floating point registers.
  bool HasFloat;

  // IsFP64bit - General-purpose registers are 64 bits wide
  bool IsGP64bit;

  // HasVFPU - Processor has a vector floating point unit.
  bool HasVFPU;

  // isLinux - Target system is Linux. Is false we consider ELFOS for now.
  bool IsLinux;

  /// Features related to the presence of specific instructions.

  // HasSEInReg - SEB and SEH (signext in register) instructions.
  bool HasSEInReg;

  // HasCondMov - Conditional mov (MOVZ, MOVN) instructions.
  bool HasCondMov;

  // HasMulDivAdd - Multiply add and sub (MADD, MADDu, MSUB, MSUBu)
  // instructions.
  bool HasMulDivAdd;

  // HasMinMax - MIN and MAX instructions.
  bool HasMinMax;

  // HasSwap - Byte and half swap instructions.
  bool HasSwap;

  // HasBitCount - Count leading '1' and '0' bits.
  bool HasBitCount;

  InstrItineraryData InstrItins;

public:

  unsigned getTargetABI() const { return MapipABI; }

  /// This constructor initializes the data members to match that
  /// of the specified triple.
  MapipSubtarget(const std::string &TT, const std::string &CPU,
		const std::string &FS, bool little);

  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  bool hasMapip32() const { return MapipArchVersion >= Mapip32; }
  bool hasMapip32f() const { return MapipArchVersion >= Mapip32f; }

  bool isLittle() const { return IsLittle; }
  bool isFP64bit() const { return HasFloat; }
  bool isGP64bit() const { return false; }
  bool isGP32bit() const { return true; }
  bool isSingleFloat() const { return false; }
  bool isNotSingleFloat() const { return true; }
  bool hasVFPU() const { return HasVFPU; }
  bool isLinux() const { return IsLinux; }

  /// Features related to the presence of specific instructions.
  bool hasSEInReg()   const { return HasSEInReg; }
  bool hasCondMov()   const { return HasCondMov; }
  bool hasMulDivAdd() const { return HasMulDivAdd; }
  bool hasMinMax()    const { return HasMinMax; }
  bool hasSwap()      const { return HasSwap; }
  bool hasBitCount()  const { return HasBitCount; }
};
} // End llvm namespace

#endif
