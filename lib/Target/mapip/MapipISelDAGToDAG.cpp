//===-- MapipISelDAGToDAG.cpp - A dag to dag inst selector for Mapip --------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the MAPIP target.
//
//===----------------------------------------------------------------------===//

#define DEBUG_TYPE "mapip-isel"
#include "Mapip.h"
#include "MapipMachineFunctionInfo.h"
#include "MapipRegisterInfo.h"
#include "MapipSubtarget.h"
#include "MapipTargetMachine.h"
#include "llvm/GlobalValue.h"
#include "llvm/Instructions.h"
#include "llvm/Intrinsics.h"
#include "llvm/Support/CFG.h"
#include "llvm/Type.h"
#include "llvm/CodeGen/MachineConstantPool.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Target/TargetMachine.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// MapipDAGToDAGISel - MAPIP specific code to select MAPIP machine
// instructions for SelectionDAG operations.
//===----------------------------------------------------------------------===//
namespace {

	class MapipDAGToDAGISel : public SelectionDAGISel {

		/// TM - Keep a reference to MapipTargetMachine.
		MapipTargetMachine &TM;

		/// Subtarget - Keep a pointer to the MapipSubtarget around so that we can
		/// make the right decision when generating code for different targets.
		const MapipSubtarget &Subtarget;

		bool SelectADDRri(SDValue Addr, SDValue &Base, SDValue &Offset);

	public:
		explicit MapipDAGToDAGISel(MapipTargetMachine &tm) :
		SelectionDAGISel(tm),
			TM(tm), Subtarget(tm.getSubtarget<MapipSubtarget>()) {}

		// Pass Name
		virtual const char *getPassName() const {
			return "MAPIP DAG->DAG Pattern Instruction Selection";
		}


	private:
		// Include the pieces autogenerated from the target description.
#include "MapipGenDAGISel.inc"

		/// getTargetMachine - Return a reference to the TargetMachine, casted
		/// to the target-specific type.
		const MapipTargetMachine &getTargetMachine() {
			return static_cast<const MapipTargetMachine &>(TM);
		}

		/// getInstrInfo - Return a reference to the TargetInstrInfo, casted
		/// to the target-specific type.
		const MapipInstrInfo *getInstrInfo() {
			return getTargetMachine().getInstrInfo();
		}

		SDNode *getGlobalBaseReg();
		SDNode *Select(SDNode *N);

		// getI32Imm - Return a target constant with the specified
		// value, of type i32.
		inline SDValue getI32Imm(unsigned Imm) {
			return CurDAG->getTargetConstant(Imm, MVT::i32);
		}

		virtual bool SelectInlineAsmMemoryOperand(const SDValue &Op,
			char ConstraintCode,
			std::vector<SDValue> &OutOps);
	};

}

bool MapipDAGToDAGISel::SelectADDRri(SDValue Addr, SDValue &Base, SDValue &Offset) {
  EVT ValTy = Addr.getValueType();

  // if Address is FI, get the TargetFrameIndex.
  if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
    Base   = CurDAG->getTargetFrameIndex(FIN->getIndex(), ValTy);
    Offset = CurDAG->getTargetConstant(0, ValTy);
    return true;
  }

  // on PIC code Load GA
  if (TM.getRelocationModel() == Reloc::PIC_) {
    assert(0 && "PIC");
  } else {
    if ((Addr.getOpcode() == ISD::TargetExternalSymbol ||
        Addr.getOpcode() == ISD::TargetGlobalAddress))
      return false;
    else if (Addr.getOpcode() == ISD::TargetGlobalTLSAddress) {
      assert(0 && "TLS");
    }
  }

  // Addresses of the form FI+const or FI|const
  if (CurDAG->isBaseWithConstantOffset(Addr)) {
    ConstantSDNode *CN = dyn_cast<ConstantSDNode>(Addr.getOperand(1));
    if (isInt<16>(CN->getSExtValue())) {

      // If the first operand is a FI, get the TargetFI Node
      if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>
                                  (Addr.getOperand(0)))
        Base = CurDAG->getTargetFrameIndex(FIN->getIndex(), ValTy);
      else
        Base = Addr.getOperand(0);

      Offset = CurDAG->getTargetConstant(CN->getZExtValue(), ValTy);
      return true;
    }
  }

  Base   = Addr;
  Offset = CurDAG->getTargetConstant(0, ValTy);
  return true;
}

/// getGlobalBaseReg - Output the instructions required to put the
/// GOT address into a register.
SDNode *MapipDAGToDAGISel::getGlobalBaseReg() {
	unsigned GlobalBaseReg = getInstrInfo()->getGlobalBaseReg(MF);
	return CurDAG->getRegister(GlobalBaseReg, TLI.getPointerTy()).getNode();
}

/// Select instructions not customized! Used for
/// expanded, promoted and normal instructions
SDNode* MapipDAGToDAGISel::Select(SDNode *Node) {
	unsigned Opcode = Node->getOpcode();

	// Dump information about the Node being selected
	DEBUG(errs() << "Selecting: "; Node->dump(CurDAG); errs() << "\n");

	// If we have a custom node, we already have selected!
	if (Node->isMachineOpcode()) {
		DEBUG(errs() << "== "; Node->dump(CurDAG); errs() << "\n");
		return NULL;
	}

	switch(Opcode) {
		default: break;
	// Get target GOT address.
	case ISD::GLOBAL_OFFSET_TABLE:
		return getGlobalBaseReg();

#if 0	// fp not yet supported
	case ISD::ConstantFP: {
		DebugLoc dl = Node->getDebugLoc();
		ConstantFPSDNode *CN = dyn_cast<ConstantFPSDNode>(Node);
		if (Node->getValueType(0) == MVT::f64 && CN->isExactlyValue(+0.0)) {
			SDValue Zero = CurDAG->getCopyFromReg(CurDAG->getEntryNode(), dl,
				Mapip::ZERO, MVT::i32);
			return CurDAG->getMachineNode(Mapip::BuildPairF64, dl, MVT::f64, Zero,
				Zero);
		}
		break;
	}
#endif

#if 0	// threads not supported
	case MapipISD::ThreadPointer: {
		unsigned SrcReg = Mapip::HWR29;
		unsigned DestReg = Mapip::V1;
		SDNode *Rdhwr = CurDAG->getMachineNode(Mapip::RDHWR, Node->getDebugLoc(),
			Node->getValueType(0), CurDAG->getRegister(SrcReg, MVT::i32));
		SDValue Chain = CurDAG->getCopyToReg(CurDAG->getEntryNode(), dl, DestReg,
			SDValue(Rdhwr, 0));
		SDValue ResNode = CurDAG->getCopyFromReg(Chain, dl, DestReg, MVT::i32);
		ReplaceUses(SDValue(Node, 0), ResNode);
		return ResNode.getNode();
	}
#endif
	}

	// Select the default instruction
	SDNode *ResNode = SelectCode(Node);

	DEBUG(errs() << "=> ");
	if (ResNode == NULL || ResNode == Node)
		DEBUG(Node->dump(CurDAG));
	else
		DEBUG(ResNode->dump(CurDAG));
	DEBUG(errs() << "\n");
	return ResNode;
}

bool MapipDAGToDAGISel::
SelectInlineAsmMemoryOperand(const SDValue &Op, char ConstraintCode,
	std::vector<SDValue> &OutOps)
{
	assert(ConstraintCode == 'm' && "unexpected asm memory constraint");
	OutOps.push_back(Op);
	return false;
}

/// createMapipISelDag - This pass converts a legalized DAG into a
/// MAPIP-specific DAG, ready for instruction scheduling.
FunctionPass *llvm::createMapipISelDag(MapipTargetMachine &TM) {
	return new MapipDAGToDAGISel(TM);
}
